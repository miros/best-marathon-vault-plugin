plugins {
    id "scala"
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "com.github.johnrengelman.shadow" version "4.0.4"
    id "com.github.breadmoirai.github-release" version "2.2.8"
}

ext {
    marathonVersion = (System.getenv("MARATHON_VERSION") ?: "1.7.174")
    mesosVersion = (System.getenv("MESOS_VERSION") ?: "1.7.1")
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "http://downloads.mesosphere.io/maven" }
}

group = 'io.funbox'
version = '0.0.1'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "com.bettercloud:vault-java-driver:4.0.0"

    compileOnly "org.scala-lang:scala-library:2.12.8"
    compileOnly "org.slf4j:slf4j-api:1.7.10"
    compileOnly "mesosphere.marathon:plugin-interface_2.12:${marathonVersion}"

    testImplementation("org.jetbrains.kotlin:kotlin-test") {
        exclude group: "junit"
    }
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5") {
        exclude group: "junit"
    }

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.0"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.4.0"
    testRuntime "org.junit.platform:junit-platform-launcher:1.4.0"
    
    testImplementation("ch.qos.logback:logback-classic:1.1.11")

    testImplementation("org.testcontainers:testcontainers:1.11.2")
    testImplementation("org.testcontainers:junit-jupiter:1.11.2")
    testImplementation("org.testcontainers:vault:1.11.2")

    testImplementation("com.mesosphere:marathon-client:0.6.2")
    testImplementation("com.squareup.okhttp3:okhttp:3.14.1")
    testImplementation("com.google.code.gson:gson:2.8.5")

    testImplementation "org.assertj:assertj-core:3.12.1"
    testImplementation "org.awaitility:awaitility-kotlin:3.1.6"
}


compileScala.dependsOn.remove("compileJava")
compileKotlin.dependsOn compileScala
compileKotlin.classpath += files(compileScala.destinationDir)

test {
    useJUnitPlatform {
        // details 'flat'
        // details 'tree'
        // details 'verbose'
    }

    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat "full"
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

sourceSets {
    integrationTests {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir 'src/test-integration/kotlin'
        }
        resources.srcDirs += file('src/test-integration/resources')
    }
}

configurations {
    integrationTestsImplementation.extendsFrom testImplementation
    integrationTestsRuntime.extendsFrom testRuntime
}

task testIntegration(type: Test) {
    testClassesDirs= sourceSets.integrationTests.output.classesDirs
    classpath = sourceSets.integrationTests.runtimeClasspath
    outputs.upToDateWhen { false }

    systemProperty "MARATHON_VERSION", marathonVersion
    systemProperty "MESOS_VERSION", mesosVersion

    useJUnitPlatform {

    }

    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat "full"
    }
}

shadowJar {
    archiveBaseName = "${rootProject.name}"
    version = null
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

jar.enabled = false

assemble.dependsOn(shadowJar)
testIntegration.dependsOn(assemble)

githubRelease {
    token System.getenv("GITHUB_TOKEN") ?: ""
    owner "miros"
    releaseAssets shadowJar.archivePath
}