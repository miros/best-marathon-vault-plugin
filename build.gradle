plugins {
    id 'scala'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id "com.github.johnrengelman.shadow" version "4.0.4"
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "http://downloads.mesosphere.io/maven" }
}


jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.scala-lang:scala-library:2.12.8'

    compileOnly "org.slf4j:slf4j-api:1.7.10"
    compileOnly "mesosphere.marathon:plugin-interface_2.12:1.7.174"

    implementation "com.bettercloud:vault-java-driver:4.0.0"

    testImplementation('org.jetbrains.kotlin:kotlin-test') {
        exclude group: 'junit'
    }
    testImplementation('org.jetbrains.kotlin:kotlin-test-junit5') {
        exclude group: 'junit'
    }

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.4.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.4.0")
    testRuntime("org.junit.platform:junit-platform-launcher:1.4.0")

    testImplementation("org.assertj:assertj-core:3.12.1")
}


compileScala.dependsOn.remove("compileJava")
compileKotlin.dependsOn compileScala
compileKotlin.classpath += files(compileScala.destinationDir)

test {
    useJUnitPlatform {
        // details 'flat'
        // details 'tree'
        // details 'verbose'
    }

    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat "full"
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

shadowJar {
    archiveBaseName = "${rootProject.name}-uber"
}

assemble.dependsOn(shadowJar)
